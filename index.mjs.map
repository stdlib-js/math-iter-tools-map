{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/validate.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isFunction from '@stdlib/assert-is-function';\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which invokes a unary function accepting a single numeric argument for each iterated value.\n*\n* ## Notes\n*\n* -   When invoked, the input function is provided one argument:\n*\n*     -   `value`: iterated value\n*\n* -   If an environment supports `Symbol.iterator` **and** a provided iterator is iterable, the returned iterator is iterable.\n*\n* @param {Iterator} iterator - input iterator\n* @param {Function} fcn - function to invoke\n* @param {Options} [options] - options\n* @param {*} [options.invalid=NaN] - return value when an input iterator yields a non-numeric value\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @throws {TypeError} second argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* import randu from '@stdlib/random-iter-randu';\n* import sin from '@stdlib/math-base-special-sin';\n*\n* var iter = iterMap( randu(), sin );\n*\n* var r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* r = iter.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction iterMap( iterator, fcn, options ) {\n\tvar opts;\n\tvar iter;\n\tvar err;\n\tvar FLG;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( '0e146', iterator ) );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( '0e12H', fcn ) );\n\t}\n\topts = {\n\t\t'invalid': NaN\n\t};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\treturn {\n\t\t\t'value': ( isNumber( v.value ) ) ? fcn( v.value ) : opts.invalid,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterMap( iterator[ iteratorSymbol ](), fcn, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterMap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {*} [options.invalid] - return value when an input iterator yields a non-numeric value\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'invalid': NaN\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isPlainObject( options ) ) {\n\t\treturn new TypeError( format( '0e12V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'invalid' ) ) {\n\t\topts.invalid = options.invalid;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n"],"names":["iterMap","iterator","fcn","options","opts","iter","err","FLG","isIteratorLike","TypeError","format","isFunction","invalid","NaN","arguments","length","isPlainObject","hasOwnProp","validate","setReadOnly","v","done","next","value","isNumber","iteratorSymbol"],"mappings":";;+xBAuEA,SAASA,EAASC,EAAUC,EAAKC,GAChC,IAAIC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAgBP,GACrB,MAAM,IAAIQ,UAAWC,EAAQ,QAAST,IAEvC,IAAMU,EAAYT,GACjB,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAKvC,GAHAE,EAAO,CACNQ,QAAWC,KAEPC,UAAUC,OAAS,IACvBT,ECtCF,SAAmBF,EAAMD,GACxB,OAAMa,EAAeb,IAGhBc,EAAYd,EAAS,aACzBC,EAAKQ,QAAUT,EAAQS,SAEjB,MALC,IAAIH,UAAWC,EAAQ,QAASP,GAMzC,CD8BQe,CAAUd,EAAMD,GACjBG,GACJ,MAAMA,EAYR,OAPAa,EADAd,EAAO,CAAA,EACY,QAenB,WACC,IAAIe,EACJ,GAAKb,EACJ,MAAO,CACNc,MAAQ,GAIV,IADAD,EAAInB,EAASqB,QACND,KAEN,OADAd,GAAM,EACCa,EAER,MAAO,CACNG,MAAWC,EAAUJ,EAAEG,OAAYrB,EAAKkB,EAAEG,OAAUnB,EAAKQ,QACzDS,MAAQ,EAET,IA9BDF,EAAad,EAAM,UAuCnB,SAAckB,GAEb,GADAhB,GAAM,EACDO,UAAUC,OACd,MAAO,CACNQ,MAASA,EACTF,MAAQ,GAGV,MAAO,CACNA,MAAQ,EAET,IA/CII,GAAkBd,EAAYV,EAAUwB,KAC5CN,EAAad,EAAMoB,GAsDpB,WACC,OAAOzB,EAASC,EAAUwB,KAAoBvB,EAAKE,EACnD,IAtDMC,CAuDR"}